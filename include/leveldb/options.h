// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

/**
 * options.h: 控制整个DB的行为，同时控制单个的读写操作。
 */
#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>
#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
/* block 在存入file时采用的压缩方法。注：DB由一系列blocks组成，每个block包含一系列有序的kv对。 */
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression     = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
// options 控制db的行为（作为参数传给DB::Open）
struct LEVELDB_EXPORT Options {
  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // comparator 用于定义keys在table中的排序方式，默认用字典逐字节序，client需要保证传给DB的comparator保持不变.
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // Default: false
  bool create_if_missing; //如果为true，则在DB不见时就创建一个新的DB,默认为false

  // If true, an error is raised if the database already exists.
  // Default: false
  bool error_if_exists;   // 如果为true，在DB存在时则报错；默认为false

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // Default: false
  /* 如果为true，在执行时会严格检查正在处理的数据，发现错就停止，这会导致不可以预知的行为：
   * 一个DB条目的损坏会导致大量条目不可读或者整个DB无法打开 */
  bool paranoid_checks;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  /* 用env制定的对象与OS环境进行交互 */
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-NULL, or to a file stored
  // in the same directory as the DB contents if info_log is NULL.
  // Default: NULL
  /* 由db生成的任何进程／错误信息，如果info_log不为null， 则记录如info_log，否则写入
   * 与DB 内存相同目录的其他文件*/
  Logger* info_log;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  //
  // Default: 4MB
  /**
   * 影响性能的参数。在转成有序磁盘文件之前，在内存中建立的数据，由未排序的磁盘日志支持。
   * 较大的值会提升性能，特别在批量加载时。最多可同时在内存保留2个write buffer，因此这个
   * 参数会影响内存占用，同时较大write buffer，在下次打开DB时，导致更长的恢复时间。
   */
  size_t write_buffer_size;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  //
  // Default: 1000
  /* DB可以用的打开文件的数量，如果DB的工作集较大，需要增加该值（每2MB的工作集打开一个file） */
  int max_open_files;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-NULL, use the specified cache for blocks.
  // If NULL, leveldb will automatically create and use an 8MB internal cache.
  // Default: NULL
  /* 控制block，用户数据存在一系列blocks中，block时从磁盘中读取的单位。
   * 如果不为null，用block_cache来缓存blocks，否则leveldb自动创建一个8M的内部cache */
  Cache* block_cache;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  //
  // Default: 4K
  /* 每个block的size，因为block一般压缩，所以block_size一般会比block在磁盘中的size要大 */
  size_t block_size;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //
  // Default: 16
  /* key增量编码自重启点的keys（密钥）数，可动态变，client应该保留该参数 */
  int block_restart_interval;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  //
  // Default: 2MB
  /* 在切换到新文件前，leveldb 会将这个数量的bytes写入文件。如果filesytem能高效
   * 处理大文件，可以考虑增大该值。不足是压缩时间变长，延迟增加，性能变差。增加该值的另
   * 一个原因是当初填充了一个大DB */
  size_t max_file_size;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  /* 用compresson来压缩blocks，，默认采用kSnappyCompression，压缩、解压缩速度快于磁盘，
   * 所以尽量采用kSnappyCompression */
  CompressionType compression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  /* 如果true，在db打开时，将追加到现有manifest和log 文件。会显著加快打开速度。默认为false */
  bool reuse_logs;

  // If non-NULL, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  //
  // Default: NULL
  /* 若不为null，使用filter policy会减少disk读取。如果传入NewBloomFilterPolicy，许多应用会受益 */
  const FilterPolicy* filter_policy;

  // Create an Options object with default values for all fields.
  Options();
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // Default: false
  /* 如果true，从storage读取的所有数据都会与相应的校验和来验证 */
  bool verify_checksums;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // Default: true
  /* 从这个迭代中读取的数据是否需要缓存到内存？对于scan一般会设为false。默认设为true */
  bool fill_cache;

  // If "snapshot" is non-NULL, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is NULL, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // Default: NULL
  /* 如果不为null，则从提供的快照读取数据（快照必须属于该DB且没有被释放）。如果null，则在开始读取时使用隐式快照 */
  const Snapshot* snapshot;

  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(NULL) {
  }
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  //
  // Default: false
  /* 如果为true，则在write完成前需要flush os的写缓冲。如果为false，进程crash不会丢数据，但机器crash，最新
   * 写入的一些记录可能会丢失。默认false */
  bool sync;

  WriteOptions()
      : sync(false) {
  }
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
